*guh.txt*

==============================================================================
guh.nvim                                                            *guh*

Work with GitHub PRs in Neovim. Wraps the GitHub `gh` CLI tool and provides
a very minimalist yet effective workflow.

Tenets:
- Never lose data.
- Avoid messing with the workspace at all. Try to work with buffers and PR
  data without requiring a checkout.

==============================================================================
REQUIREMENTS                                                *guh-requirements*

- nvim 0.12+
- ["gh" (GitHub CLI)](https://cli.github.com/)
<
==============================================================================
INSTALLATION                                                     *guh-install*

 To install:
>lua
  vim.pack.add{ 'https://github.com/justinmk/guh.nvim' }

==============================================================================
CONFIGURATION                                                     *guh-config*

Default config is below. You can change any of these options, or skip this if
you don't want to change the defaults. >lua

  require('guh').setup({
    debug = false, -- if set to true debugging information is written to stdpath(log)/.guh.log file
    merge = {
      approved = '--squash',
      nonapproved = '--auto --squash',
    },
    html_comments_command = { 'lynx', '-stdin', '-dump' }, -- command to render HTML comments in PR view
    -- override default keymaps with the ones you prefer
    -- set keymap to false or '' to disable it
    keymaps = {
      diff = {
        open_file = 'gf',
        open_file_tab = '',
        open_file_split = 'o',
        open_file_vsplit = 'O',
        approve = 'cA',
        request_changes = 'cR',
      },
      comment = {
        send_comment = 'c<CR>' -- this one cannot be disabled
      },
      pr = {
        approve = 'cA',
        request_changes = 'cR',
        merge = 'cM',
        comment = 'ca',
        diff = 'cp',
      },
    },
  })
<

==============================================================================
WORKFLOWS

==============================================================================
Quick PR Review                                           *guh-basic-workflow*

To review a PR without doing a checkout in your repo:

- Run `:Guh` to select and view a PR.
  - Run it anytime later to refresh/reopen the PR view.
- Run `:GuhDiff` to see the diff. Comments on the diff are loaded.
  - Navigate comments using `vim.diagnostic.jump` (|]d| |[d|).
  - See comment details using `<C-w>d` |CTRL-W_d-default|
- Run `:GuhComment` to comment in existing conversations or start the
  new one directly in diff view. Alternatively you can use `:GuhWeb` to open
  comments in browser.
- Run `:GuhApprove` to approve PR if everything is OK. you can use
  `ca` in diff and pr views.
- Run `:GuhRequestChanges` to request changes on PR if something is
  wrong. you can use `cr` in diff and pr views.

==============================================================================
The checkout workflow                                  *guh-checkout-workflow*

The "checkout" workflow:

- Run `:GuhDiff` to see the diff of the current PR. Use `gf` in this
  buffer to go to a file and line if you want to see more context. Comments
  will be shown as diagnostics in the opened file.
- Run `:GuhLoadComments` to review all comments in the code if diff view
  is not enough. List of comments is loaded to quickfix and shown in file as
  diagnostic messages.
- Run `:GuhComment` to comment in a conversation or a diff line/range.
  Or use `:GuhWeb` to open the web UI.
- Run `:GuhApprove` to approve PR if everything is OK. you can use
  `ca` in diff and pr views.
- Run `:GuhRequestChanges` to request changes on PR if something is
  wrong. you can use `cr` in diff and pr views.

==============================================================================
COMMANDS                                                        *guh-commands*

                                                                        *:Guh*
:Guh [pr_or_issue]
              Views (or refreshes) the given PR or issue, or prompts to select
              a PR. >

                :Guh 123
<
              Related gh commands: >
                gh pr view 42
                gh issue view 42
<
              Buffer-local key bindings:
              - `cA` to approve PR
              - `cM` to merge PR (see `GuhMerge` for details)
              - `ca` to write top level PR comment
              - `cp` to open diff view

              HTML comments is the thing too and they look bad in text. To
              render HTML as text `html_comments_command` settings can be used
              to specify command. You can use any command here that accepts
              html via stdin and outputs text to stdout. By default `lynx` is
              used, but if something works better for you feel free to use it.

              Plugin searches for html tag and only then passes comment
              through `html_comments_command`. You can disable this
              functionality by setting `html_comments_command` as `false`.

                                                            *:GuhLoadComments*
:GuhLoadComments
              Loads the current PR diff comments in a vertical 'scrollbind'
              split window.

                                                                    *:GuhDiff*
:GuhDiff      Loads PR diff that you can review. Shows diff of selected PR. If
              no PR is selected then PR number is resolved from git branch
              associated with PR. Comments are loaded and shown as diagnostics
              in this view as well.

              Buffer-local key bindings:
              - `gf` go to file from PR diff. `gf` command will not work if
                you use `:Guh` command and branch is not checked out.
              - `cA` to approve PR


                                                                 *:GuhComment*
:GuhComment   With bang "!", comments on PR at top level. Without bang,
              comments on the current diff line or range. >
                :[range]GuhComment
<
              Buffer-local mappings:

              - c<Enter> If there is already loaded comment on cursor line
                (using `GuhLoadComments` command) then comment is added as
                reply to thread. If there is no comment on line then new
                conversation is started.


------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:norl:
