*guh.txt*

==============================================================================
guh.nvim                                                            *guh*

Review and manage GitHub PRs from Neovim.

Unlike other plugins, this plugin augments GitHub PR review rather than
replacing its web interface entirely.

==============================================================================
REQUIREMENTS                        *guh-requirements*

- Neovim 0.10+
- GitHub CLI (gh) (https://cli.github.com/)
- Optional: [Diffview.nvim](https://github.com/sindrets/diffview.nvim)

To override UI select for fzf-lua or telescope, use:
>lua
vim.cmd('FzfLua register_ui_select')
<

==============================================================================
INSTALLATION                        *guh-installation*

NOTE: Default config is shown below. Skip settings if you are fine with defaults.
>lua
  vim.pack.add{ 'https://github.com/justinmk/guh.nvim' }
  require('guh').setup({
    debug = false, -- if set to true debugging information is written to ~/.guh.log file
    view_split = 'vsplit', -- set to empty string '' to open in active buffer, use 'tabnew' to open in tab
    diff_split = 'vsplit', -- set to empty string '' to open in active buffer, use 'tabnew' to open in tab
    comment_split = 'split', -- set to empty string '' to open in active buffer, use 'tabnew' to open in tab
    open_command = 'open', -- open command to use, e.g. on Linux you might want to use xdg-open
    merge = {
      approved = '--squash',
      nonapproved = '--auto --squash',
    },
    html_comments_command = { 'lynx', '-stdin', '-dump' }, -- command to render HTML comments in PR view
    -- override default keymaps with the ones you prefer
    -- set keymap to false or '' to disable it
    keymaps = {
      diff = {
        open_file = 'gf',
        open_file_tab = '',
        open_file_split = 'o',
        open_file_vsplit = 'O',
        approve = 'cA',
        request_changes = 'cR',
      },
      comment = {
        send_comment = 'c<CR>' -- this one cannot be disabled
      },
      pr = {
        approve = 'cA',
        request_changes = 'cR',
        merge = 'cM',
        comment = 'ca',
        diff = 'cp',
      },
    },
  })
<

==============================================================================
PR REVIEW WORKFLOWS

==============================================================================
Quick PR Review                                           *guh-quick-workflow*

To review a PR without doing a checkout in your repo:

- Run `:GuhSelect` and select and view the PR.
  - You can open `:GuhView` anytime later to refresh/reopen PR view.
- Run `:GuhDiff` to see the diff. Comments on the diff are loaded.
  - Navigate comments using `vim.diagnostic.jump` (|]d| |[d|).
  - See comment details using `<C-w>d` |CTRL-W_d-default|
- Run `:GuhCommentLine` to comment in existing conversations or start the
  new one directly in diff view. Alternatively you can use
  `:GuhWebComment` to open comments in browser.

- Run `:GuhApprove` to approve PR if everything is OK. you can use
  `ca` in diff and pr views.

- Run `:GuhRequestChanges` to request changes on PR if something is
  wrong. you can use `cr` in diff and pr views.

==============================================================================
The checkout workflow                                  *guh-checkout-workflow*

The "checkout" workflow:

- Run `:GuhDiff` to see the diff of the current PR. Use `gf` in this
  buffer to go to a file and line if you want to see more context. Comments
  will be shown as diagnostics in the opened file.

- Run `:GuhLoadComments` to review all comments in the code if diff view
  is not enough. List of comments is loaded to quickfix and shown in file as
  diagnostic messages.

- Run `:GuhComment` to comment in existing conversations or start the
  new one. Alternatively you can use `:GuhWebComment` to open comments in
  browser.

- Run `:GuhApprove` to approve PR if everything is OK. you can use
  `ca` in diff and pr views.

- Run `:GuhRequestChanges` to request changes on PR if something is
  wrong. you can use `cr` in diff and pr views.

==============================================================================
COMMANDS                                                        *guh-commands*

==============================================================================
:GuhSelect                     *:GuhSelect*

Sets a PR as the "selected" PR, without performing a git checkout in the
workspace. >

  :GuhSelect 123

==============================================================================
:GuhCheckout                   *:GuhCheckout*

Performs a git checkout of a PR selected from a list or provided as a command
arg. >

  :GuhCheckout 123

==============================================================================
:GuhView                       *:GuhView*

Shows PR information (`gh pr view`), or refreshes the view if it is already open.
Works on the current "selected PR" or on the PR given as an arg: >

  :GuhView 123

Supported key bindings:

* `cA` to approve PR

* `cM` to merge PR (see `GuhMerge` for details)

* `ca` to write top level PR comment

* `cp` to open diff view

Note: You can use default vim shortcuts as well, like `gx` to open links in
this view.

HTML comments is the thing too and they look bad in text. To render HTML as
text `html_comments_command` settings can be used to specify command. You can
use any command here that accepts html via stdin and outputs text to stdout. By
default `lynx` is used, but if something works better for you feel free to use
it.

Plugin searches for html tag and only then passes comment through
`html_comments_command`. You can disable this functionality by setting
`html_comments_command` as `false`.

==============================================================================
:GuhApprove                    *:GuhApprove*

This command approves selected PR.

Can also be called with a PR number: `:GuhApprove 123`

==============================================================================
:GuhRequestChanges             *:GuhRequestChanges*

This command request changes on PR.

Can also be called with a PR number: `:GuhRequestChanges 123`

==============================================================================
:GuhMerge                      *:GuhMerge*

This command merges selected PR. Approved and non-approved PRs use different
options when running `gh pr merge` command. Check `gh pr merge -h` for
available options and use them in config's `merge` section if defaults are not
working for you.

==============================================================================
:GuhComment               *:GuhComment*

This command allows to comment on PR at top level (vs commenting on the code).

==============================================================================
:GuhLoadComments               *:GuhLoadComments*

TODO: i think this loads "new" comments or something..?

Loads PR comments of the current PR checked out `:GuhCheckout`.
Only non-outdated review comments are loaded, PR comments are not loaded.
Comments are loaded to quickfix list and to buffer diagnostics on buffer load.
Navigate quickfix list using `cnext` and `cprev`.

NOTE: You must checkout the PR branch using git or via `:GuhCheckout`.

==============================================================================
:GuhDiff                                                            *:GuhDiff*

Loads PR diff that you can review. Shows diff of selected PR. If no PR is
selected then PR number is resolved from git branch associated with PR.
Comments are loaded and shown as diagnostics in this view as well.

Can also be called with a PR number: `:GuhDiff 123`

Supported key bindings:

* `gf` go to file from PR diff. `gf` command will not work if you use
  `:GuhSelect` command and branch is not checked out or you have different
  branch checked out.

* `cA` to approve PR


==============================================================================
:GuhDiffview                   *:GuhDiffview*

Shows the diff of the selected PR, or [prnum], using
[Diffview.nvim](https://github.com/sindrets/diffview.nvim).

>
    :GuhDiffview 123

However note that this command shows diff between what's in main branch and PR
branch. This might be different from what's shown in GitHub. E.g. if there are
changes in your main branch and your branch does not have changes from main
branch, then you will be shown that some things are missing in your branch.

This command will not show correct diff sometimes if you have gh older than
2.63.0 (details here https://github.com/cli/cli/pull/9938).

==============================================================================
:GuhCommentLine                 *:GuhCommentLine*

This command opens buffer where you can write your comment.

If you want to create multi-line comment then select multiple lines using
visual mode.

Supported key bindings:

* c-enter:

    * If there is already loaded comment on cursor line (using
      `GuhLoadComments` command) then comment is added as reply to thread.

    * If there is no comment on line then new conversation is started.

==============================================================================
:GuhUpdateComment              *:GuhUpdateComment*

This command updates selected comment.

==============================================================================
:GuhDeleteComment              *:GuhDeleteComment*

This command deletes selected comment.

==============================================================================
:GuhWebComment                                                *:GuhWebComment*

Opens comment under cursor in browser using `open_command` command (default
`open`).

------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:norl:
